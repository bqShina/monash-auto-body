import React__default, { useEffect, Component, useState, useCallback, useRef } from 'react';
import styled, { keyframes } from 'styled-components';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

var EditorMode;

(function (EditorMode) {
  EditorMode["AnnotateWithText"] = "AnnotateWithText";
  EditorMode["AnnotateOnly"] = "AnnotateOnly";
  EditorMode["ReadOnlyWithSelection"] = "ReadOnlyWithSelection";
  EditorMode["ReadOnly"] = "ReadOnly";
})(EditorMode || (EditorMode = {}));

var SelectionMode;

(function (SelectionMode) {
  SelectionMode["New"] = "NEW";
  SelectionMode["Selecting"] = "SELECTING";
  SelectionMode["Editing"] = "EDITING";
  SelectionMode["Final"] = "FINAL";
})(SelectionMode || (SelectionMode = {}));

var AllowedShape;

(function (AllowedShape) {
  AllowedShape["Oval"] = "Oval";
  AllowedShape["Point"] = "Point";
  AllowedShape["Rectangle"] = "Rectangle";
})(AllowedShape || (AllowedShape = {}));

function compose() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  if (funcs.length === 0) {
    return function (arg) {
      return arg;
    };
  }

  if (funcs.length === 1) {
    return funcs[0];
  }

  return funcs.reduce(function (a, b) {
    return function () {
      return a(b.apply(void 0, arguments));
    };
  });
}

function useHandleEscapeEvent(unselectSelectedAnnotation, selectedItem) {
  useEffect(function () {
    function handleKeyDown(event) {
      if (event.key === 'Escape') {
        unselectSelectedAnnotation();
      }
    } // Bind the event listener


    document.addEventListener('keydown', handleKeyDown);
    return function () {
      // Unbind the event listener on clean up
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [selectedItem, unselectSelectedAnnotation]);
}

var getMouseRelativeCoordinates = function getMouseRelativeCoordinates(e) {
  // nativeEvent.offsetX gives inconsistent results when dragging
  // up and to the left rather than the more natural down and to the
  // right. The reason could be browser implementation (it is still experimental)
  // or it could be that nativeEvent offsets are based on target rather than
  // currentTarget.
  // To keep consistent behavior of the selector use the bounding client rect.
  var rect = e.currentTarget.getBoundingClientRect();
  var offsetX = e.clientX - rect.x;
  var offsetY = e.clientY - rect.y;
  return {
    x: offsetX / rect.width * 100,
    y: offsetY / rect.height * 100
  };
};

var clamp = function clamp(a, b, i) {
  return Math.max(a, Math.min(b, i));
};

var getTouchRelativeCoordinates = function getTouchRelativeCoordinates(e) {
  var touch = e.targetTouches[0];
  var boundingRect = e.currentTarget.getBoundingClientRect(); // https://idiallo.com/javascript/element-postion
  // https://stackoverflow.com/questions/25630035/javascript-getboundingclientrect-changes-while-scrolling

  var offsetX = touch.pageX - boundingRect.left;
  var offsetY = touch.pageY - (boundingRect.top + window.scrollY);
  return {
    x: clamp(0, 100, offsetX / boundingRect.width * 100),
    y: clamp(0, 100, offsetY / boundingRect.height * 100)
  };
};

var getCoordPercentage = function getCoordPercentage(e) {
  if (isTouchEvent(e)) {
    if (isValidTouchEvent(e)) {
      isTouchMoveEvent(e) && e.preventDefault();
      return getTouchRelativeCoordinates(e);
    }

    return;
  } else {
    return getMouseRelativeCoordinates(e);
  }
};

var isTouchEvent = function isTouchEvent(e) {
  return e.targetTouches !== undefined;
};

var isValidTouchEvent = function isValidTouchEvent(e) {
  return e.targetTouches.length === 1;
};

var isTouchMoveEvent = function isTouchMoveEvent(e) {
  return e.type === 'touchmove';
};

var withRelativeMousePos = function withRelativeMousePos(key) {
  if (key === void 0) {
    key = 'relativeMousePos';
  }

  return function (DecoratedComponent) {
    var WithRelativeMousePos = /*#__PURE__*/function (_Component) {
      _inheritsLoose(WithRelativeMousePos, _Component);

      function WithRelativeMousePos() {
        var _this;

        _this = _Component.apply(this, arguments) || this;
        _this.state = {
          x: 0,
          y: 0
        };

        _this.innerRef = function (el) {
          _this.container = el;
        };

        _this.onMouseMove = function (e) {
          var xystate = getMouseRelativeCoordinates(e);

          _this.setState(xystate);
        };

        _this.onTouchMove = function (e) {
          if (e.targetTouches.length === 1) {
            var _this$container, _this$container$offse, _this$container2, _this$container2$offs;

            var touch = e.targetTouches[0];
            var offsetX = touch.pageX - ((_this$container = _this.container) == null ? void 0 : (_this$container$offse = _this$container.offsetParent) == null ? void 0 : _this$container$offse.offsetLeft);
            var offsetY = touch.pageY - ((_this$container2 = _this.container) == null ? void 0 : (_this$container2$offs = _this$container2.offsetParent) == null ? void 0 : _this$container2$offs.offsetTop);

            _this.setState({
              x: offsetX / _this.container.width * 100,
              y: offsetY / _this.container.height * 100
            });
          }
        };

        _this.onMouseLeave = function (_e) {
          _this.setState({
            x: null,
            y: null
          });
        };

        _this.onTouchLeave = function (_e) {
          _this.setState({
            x: null,
            y: null
          });
        };

        return _this;
      }

      var _proto = WithRelativeMousePos.prototype;

      _proto.render = function render() {
        var _hocProps;

        var props = {
          innerRef: this.innerRef,
          onMouseMove: this.onMouseMove,
          onMouseLeave: this.onMouseLeave,
          onTouchMove: this.onTouchMove,
          onTouchLeave: this.onTouchLeave,
          x: this.state.x,
          y: this.state.y
        };
        var hocProps = (_hocProps = {}, _hocProps[key] = props, _hocProps);
        return React__default.createElement(DecoratedComponent, Object.assign({}, this.props, hocProps));
      };

      return WithRelativeMousePos;
    }(Component); // WithRelativeMousePos.displayName = `withRelativeMousePos(${DecoratedComponent.displayName})`;


    return WithRelativeMousePos;
  };
};

var _templateObject, _templateObject2;
var Inner = /*#__PURE__*/styled.div(_templateObject || (_templateObject = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  padding: 8px 16px;\n\n  textarea {\n    border: 0;\n    font-size: 14px;\n    margin: 6px 0;\n    min-height: 60px;\n    outline: 0;\n  }\n"])));
var Button = /*#__PURE__*/styled.div(_templateObject2 || (_templateObject2 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  background: whitesmoke;\n  border: 0;\n  box-sizing: border-box;\n  color: #363636;\n  cursor: pointer;\n  font-size: 1rem;\n  margin: 0;\n  outline: 0;\n  padding: 8px 16px;\n  text-align: center;\n  text-shadow: 0 1px 0 rgba(0, 0, 0, 0.1);\n  width: 100%;\n\n  transition: background 0.21s ease-in-out;\n\n  &:focus,\n  &:hover {\n    background: #eeeeee;\n  }\n"])));

function TextEditor(props) {
  return React__default.createElement(React__default.Fragment, null, React__default.createElement(Inner, null, React__default.createElement("textarea", {
    placeholder: "Write description",
    onFocus: props.onFocus,
    onBlur: props.onBlur,
    onChange: props.onChange,
    value: props.value
  })), props.value && React__default.createElement(Button, {
    onClick: props.onSubmit
  }, "Submit"));
}

var _templateObject$1, _templateObject2$1;
var fadeInScale = /*#__PURE__*/keyframes(_templateObject$1 || (_templateObject$1 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n"])));
var Container = /*#__PURE__*/styled.div(_templateObject2$1 || (_templateObject2$1 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  background: white;\n  border-radius: 2px;\n  box-shadow: 0 1px 5px 0 rgba(0, 0, 0, 0.2), 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n    0 3px 1px -2px rgba(0, 0, 0, 0.12);\n  margin-top: 16px;\n  transform-origin: top left;\n\n  animation: ", " 0.31s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  overflow: hidden;\n  z-index: 2;\n"])), fadeInScale);

function Editor(props) {
  var geometry = props.annotation.geometry;

  var _useState = useState(''),
      text = _useState[0],
      setText = _useState[1];

  if (!geometry) return null;
  return React__default.createElement(Container, {
    className: props.className,
    style: _extends({
      position: 'absolute',
      left: geometry.x + "%",
      top: geometry.y + geometry.height + "%"
    }, props.style)
  }, React__default.createElement(TextEditor, {
    onChange: function onChange(e) {
      return setText(e.target.value);
    },
    onSubmit: function onSubmit() {
      props.onSubmit(_extends({}, props.annotation, {
        data: _extends({}, props.annotation.data, {
          text: text
        })
      }));
    },
    value: text
  }));
}

function pointerDown(annotation, e, options, type) {
  var selection = annotation == null ? void 0 : annotation.selection;

  if (!selection) {
    var _getCoordPercentage = getCoordPercentage(e),
        anchorX = _getCoordPercentage.x,
        anchorY = _getCoordPercentage.y;

    return {
      geometry: {
        x: 0,
        y: 0,
        type: type,
        width: 0,
        height: 0
      },
      selection: {
        mode: SelectionMode.New,
        anchorX: anchorX,
        anchorY: anchorY
      },
      data: {
        id: options.idFunction()
      }
    };
  }

  return;
}
function pointerUp(annotation, _e, editorMode) {
  if (annotation != null && annotation.selection) {
    var geometry = annotation.geometry;

    if (!geometry || annotation.selection.mode === SelectionMode.New) {
      return;
    }

    switch (annotation.selection.mode) {
      case SelectionMode.Selecting:
        return _extends({}, annotation, {
          selection: _extends({}, annotation.selection, {
            mode: editorMode === EditorMode.AnnotateOnly ? SelectionMode.Final : SelectionMode.Editing
          })
        });
    }
  }

  return annotation;
}
function pointerMove(annotation, e) {
  var _annotation$selection, _annotation$selection2;

  if ((annotation == null ? void 0 : (_annotation$selection = annotation.selection) == null ? void 0 : _annotation$selection.mode) === SelectionMode.New || (annotation == null ? void 0 : (_annotation$selection2 = annotation.selection) == null ? void 0 : _annotation$selection2.mode) === SelectionMode.Selecting) {
    var _annotation$selection3 = annotation.selection,
        anchorX = _annotation$selection3.anchorX,
        anchorY = _annotation$selection3.anchorY;

    var _getCoordPercentage2 = getCoordPercentage(e),
        newX = _getCoordPercentage2.x,
        newY = _getCoordPercentage2.y;

    var width = newX - anchorX;
    var height = newY - anchorY;
    var x = width > 0 ? anchorX : newX;
    var y = height > 0 ? anchorY : newY;
    return _extends({}, annotation, {
      selection: _extends({}, annotation == null ? void 0 : annotation.selection, {
        mode: SelectionMode.Selecting
      }),
      geometry: _extends({}, annotation.geometry, {
        // Fix types so that these defaults are not needed
        x: x != null ? x : 0,
        y: y != null ? y : 0,
        width: Math.abs(width),
        height: Math.abs(height)
      })
    });
  }

  return annotation;
}
var createSelectorMethods = function createSelectorMethods(type) {
  return {
    onMouseDown: function onMouseDown(annotation, e, options) {
      return pointerDown(annotation, e, options, type);
    },
    onMouseUp: function onMouseUp(annotation, e, _ref) {
      var editorMode = _ref.editorMode;
      return pointerUp(annotation, e, editorMode);
    },
    onMouseMove: function onMouseMove(annotation, e) {
      return pointerMove(annotation, e);
    },
    onTouchStart: function onTouchStart(annotation, e, options) {
      return pointerDown(annotation, e, options, type);
    },
    onTouchEnd: function onTouchEnd(annotation, e, _ref2) {
      var editorMode = _ref2.editorMode;
      return pointerUp(annotation, e, editorMode);
    },
    onTouchMove: function onTouchMove(annotation, e) {
      return pointerMove(annotation, e);
    }
  };
};

var TYPE = AllowedShape.Rectangle;
function intersects(_ref, geometry) {
  var x = _ref.x,
      y = _ref.y;
  if (x < geometry.x) return false;
  if (y < geometry.y) return false;
  if (x > geometry.x + geometry.width) return false;
  if (y > geometry.y + geometry.height) return false;
  return true;
}
function area(geometry) {
  return geometry.height * geometry.width;
}
var methods = /*#__PURE__*/createSelectorMethods(TYPE);
var RectangleSelector = {
  TYPE: TYPE,
  intersects: intersects,
  area: area,
  methods: methods
};

var MARGIN = 6;

var marginToPercentage = function marginToPercentage(container) {
  return {
    marginX: MARGIN / container.width * 100,
    marginY: MARGIN / container.height * 100
  };
};

var TYPE$1 = AllowedShape.Point;
function intersects$1(_ref, geometry, container) {
  var x = _ref.x,
      y = _ref.y;

  var _marginToPercentage = marginToPercentage(container),
      marginX = _marginToPercentage.marginX,
      marginY = _marginToPercentage.marginY;

  if (x < geometry.x - marginX) return false;
  if (y < geometry.y - marginY) return false;
  if (x > geometry.x + marginX) return false;
  if (y > geometry.y + marginY) return false;
  return true;
}
function area$1(_geometry, container) {
  var _marginToPercentage2 = marginToPercentage(container),
      marginX = _marginToPercentage2.marginX,
      marginY = _marginToPercentage2.marginY;

  return marginX * marginY;
}
var methods$1 = {
  onClick: function onClick(annotation, e, options) {
    if (!(annotation != null && annotation.geometry)) {
      return _extends({}, annotation, {
        selection: {
          mode: SelectionMode.Final
        },
        geometry: _extends({}, getCoordPercentage(e), {
          width: 0,
          height: 0,
          type: TYPE$1
        }),
        data: {
          id: options.idFunction()
        }
      });
    }

    return;
  }
};
var PointSelector = {
  TYPE: TYPE$1,
  intersects: intersects$1,
  area: area$1,
  methods: methods$1
};

var square = function square(n) {
  return Math.pow(n, 2);
};

var TYPE$2 = AllowedShape.Oval;
function intersects$2(_ref, geometry) {
  var x = _ref.x,
      y = _ref.y;
  var rx = geometry.width / 2;
  var ry = geometry.height / 2;
  var h = geometry.x + rx;
  var k = geometry.y + ry;
  var value = square(x - h) / square(rx) + square(y - k) / square(ry);
  return value <= 1;
}
function area$2(geometry) {
  var rx = geometry.width / 2;
  var ry = geometry.height / 2;
  return Math.PI * rx * ry;
}
var methods$2 = /*#__PURE__*/createSelectorMethods(TYPE$2);
var OvalSelector = {
  TYPE: TYPE$2,
  intersects: intersects$2,
  area: area$2,
  methods: methods$2
};

var _templateObject$2;
var Container$1 = /*#__PURE__*/styled.div(_templateObject$2 || (_templateObject$2 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  background: white;\n  border-radius: 2px;\n  box-shadow: 0 1px 5px 0 rgba(0, 0, 0, 0.2), 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n    0 3px 1px -2px rgba(0, 0, 0, 0.12);\n  padding: 8px 16px;\n  margin-top: 8px;\n  margin-left: 8px;\n  z-index: 2;\n"])));
function Content(props) {
  var geometry = props.annotation.geometry;
  if (!geometry) return null;
  return React__default.createElement(Container$1, {
    style: _extends({
      position: 'absolute',
      left: geometry.x + "%",
      top: geometry.y + geometry.height + "%"
    }, props.style),
    className: props.className
  }, props.annotation.data && props.annotation.data.text);
}

var _templateObject$3;
var Overlay = /*#__PURE__*/styled.div(_templateObject$3 || (_templateObject$3 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  background: rgba(0, 0, 0, 0.4);\n  border-radius: 5px;\n  bottom: 4px;\n  color: white;\n  font-size: 12px;\n  font-weight: bold;\n  opacity: 0;\n  padding: 10px;\n  pointer-events: none;\n  position: absolute;\n  right: 4px;\n  transition: opacity 0.21s ease-in-out;\n  user-select: none;\n"])));

var withShapeWrapper = function withShapeWrapper(DecoratedShape) {
  var WrappedComponent = function WrappedComponent(props) {
    var annotation = props.annotation,
        children = props.children,
        editorMode = props.editorMode,
        isInSelectionMode = props.isInSelectionMode,
        renderContent = props.renderContent,
        selectedAnnotation = props.selectedAnnotation,
        style = props.style;

    var _useState = useState(false),
        mouseHovered = _useState[0],
        setMouseHovered = _useState[1];

    var shouldShowContent = editorMode === EditorMode.AnnotateWithText && mouseHovered && renderContent;
    var reactContentElement = shouldShowContent && props.annotation.data.text && renderContent ? renderContent(props) : null;
    var onMouseEnter = useCallback(function () {
      return setMouseHovered(true);
    }, []);
    var onMouseLeave = useCallback(function () {
      return setMouseHovered(false);
    }, []);

    var onClick = function onClick() {
      if (props.onAnnotationClick) {
        props.onAnnotationClick(annotation);
      }
    };

    var shapeStyle = isInSelectionMode ? _extends({
      zIndex: 0
    }, style || {}) : style;
    return React__default.createElement("div", {
      onClick: onClick
    }, React__default.createElement(DecoratedShape, {
      annotation: annotation,
      children: children,
      editorMode: editorMode,
      isMouseOver: mouseHovered,
      isSelected: !!selectedAnnotation && annotation.data.id === selectedAnnotation.data.id,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      style: shapeStyle
    }), reactContentElement);
  };

  return WrappedComponent;
};

var _templateObject$4;
var Container$2 = /*#__PURE__*/styled.div(_templateObject$4 || (_templateObject$4 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  border-radius: 100%;\n  box-shadow: 0 0 2px 2px white inset;\n  box-sizing: border-box;\n  transition: box-shadow 0.21s ease-in-out;\n  z-index: ", ";\n  cursor: ", ";\n"])), function (_ref) {
  var isReadOnly = _ref.isReadOnly;
  return (isReadOnly ? 0 : 1) + ";";
}, function (_ref2) {
  var isReadOnly = _ref2.isReadOnly;
  return isReadOnly ? 'auto;' : 'pointer;';
});

function Oval(props) {
  var geometry = props.annotation.geometry,
      children = props.children,
      editorMode = props.editorMode,
      isMouseOver = props.isMouseOver,
      isSelected = props.isSelected,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave;
  var isReadOnly = editorMode === EditorMode.ReadOnly;
  if (!geometry) return null;
  var isActive = !isReadOnly && (isMouseOver || isSelected);
  return React__default.createElement(Container$2, {
    isReadOnly: isReadOnly,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    style: _extends({
      position: 'absolute',
      left: geometry.x + "%",
      top: geometry.y + "%",
      height: geometry.height + "%",
      width: geometry.width + "%",
      border: isActive ? 'solid 1px black' : 'dashed 2px black',
      boxShadow: isActive ? '0 0 1px 1px black inset' : '',
      backgroundColor: isActive ? 'rgba(128, 128, 128, 0.3)' : 'rgba(128, 128, 128, 0.05)'
    }, props.style || {})
  }, children || null);
}

var Oval$1 = /*#__PURE__*/React__default.memo( /*#__PURE__*/withShapeWrapper(Oval));

var _templateObject$5;
var Container$3 = /*#__PURE__*/styled.div(_templateObject$5 || (_templateObject$5 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  border-radius: 50%;\n  box-sizing: border-box;\n  // prettier-ignore\n  box-shadow: \n          0 0 0 1px rgba(0, 0, 0, 0.3),\n          0 0 0 2px rgba(0, 0, 0, 0.2),\n          0 5px 4px rgba(0, 0, 0, 0.4);\n  height: 16px;\n  position: absolute;\n  transform: translate3d(-50%, -50%, 0);\n  width: 16px;\n  z-index: ", ";\n  cursor: ", ";\n"])), function (_ref) {
  var isReadOnly = _ref.isReadOnly;
  return (isReadOnly ? 0 : 1) + ";";
}, function (_ref2) {
  var isReadOnly = _ref2.isReadOnly;
  return isReadOnly ? 'auto;' : 'pointer;';
});

function Point(props) {
  var geometry = props.annotation.geometry,
      children = props.children,
      editorMode = props.editorMode,
      isMouseOver = props.isMouseOver,
      isSelected = props.isSelected,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave;
  var isReadOnly = editorMode === EditorMode.ReadOnly;
  if (!geometry) return null;
  var isActive = !isReadOnly && (isMouseOver || isSelected);
  return React__default.createElement(Container$3, {
    isReadOnly: isReadOnly,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    style: _extends({
      top: geometry.y + "%",
      left: geometry.x + "%",
      border: isActive ? 'solid 3px grey' : 'solid 3px white'
    }, props.style || {})
  }, children || null);
}

var Point$1 = /*#__PURE__*/React__default.memo( /*#__PURE__*/withShapeWrapper(Point));

var _templateObject$6;
var Container$4 = /*#__PURE__*/styled.div(_templateObject$6 || (_templateObject$6 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  box-shadow: 0 0 2px 2px white inset;\n  box-sizing: border-box;\n  transition: box-shadow 0.21s ease-in-out;\n  z-index: ", ";\n  cursor: ", ";\n"])), function (_ref) {
  var isReadOnly = _ref.isReadOnly;
  return (isReadOnly ? 0 : 1) + ";";
}, function (_ref2) {
  var isReadOnly = _ref2.isReadOnly;
  return isReadOnly ? 'auto;' : 'pointer;';
});

function Rectangle(props) {
  var geometry = props.annotation.geometry,
      children = props.children,
      editorMode = props.editorMode,
      isMouseOver = props.isMouseOver,
      isSelected = props.isSelected,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave;
  var isReadOnly = editorMode === EditorMode.ReadOnly;
  if (!geometry) return null;
  var isActive = !isReadOnly && (isMouseOver || isSelected);
  return React__default.createElement(Container$4, {
    isReadOnly: isReadOnly,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    style: _extends({
      position: 'absolute',
      left: geometry.x + "%",
      top: geometry.y + "%",
      height: geometry.height + "%",
      width: geometry.width + "%",
      border: isActive ? 'solid 1px black' : 'dashed 2px black',
      boxShadow: isActive ? '0 0 1px 1px black inset' : '',
      backgroundColor: isActive ? 'rgba(128, 128, 128, 0.3)' : 'rgba(128, 128, 128, 0.05)'
    }, props.style || {})
  }, children || null);
}

var Rectangle$1 = /*#__PURE__*/React__default.memo( /*#__PURE__*/withShapeWrapper(Rectangle));

var defaultProps = {
  src: '',
  annotations: [],
  editorMode: EditorMode.AnnotateWithText,
  idFunction: function idFunction() {
    return Math.random().toString();
  },
  onAnnotationsUpdate: function onAnnotationsUpdate() {},
  onAnnotationClick: function onAnnotationClick() {},
  onSelectedAnnotationUpdate: function onSelectedAnnotationUpdate() {},
  overlayOptions: {
    displayOverlay: true
  },
  renderEditor: function renderEditor(_ref) {
    var annotation = _ref.annotation,
        onSubmit = _ref.onSubmit;
    return React__default.createElement(Editor, {
      annotation: annotation,
      onSubmit: onSubmit
    });
  },
  renderShape: function renderShape(props) {
    var annotation = props.annotation;

    switch (annotation.geometry.type) {
      case RectangleSelector.TYPE:
        return React__default.createElement(Rectangle$1, Object.assign({}, props));

      case PointSelector.TYPE:
        return React__default.createElement(Point$1, Object.assign({}, props));

      case OvalSelector.TYPE:
        return React__default.createElement(Oval$1, Object.assign({}, props));

      default:
        return null;
    }
  },
  renderContent: function renderContent(_ref2) {
    var key = _ref2.key,
        annotation = _ref2.annotation;
    return React__default.createElement(Content, {
      key: key,
      annotation: annotation
    });
  },
  renderOverlay: function renderOverlay(_ref3) {
    var annotations = _ref3.annotations,
        selectorType = _ref3.selectorType,
        overlayText = _ref3.overlayText;

    if (overlayText) {
      return React__default.createElement(Overlay, null, overlayText);
    }

    if (annotations.length === 0) {
      switch (selectorType) {
        case PointSelector.TYPE:
          return React__default.createElement(Overlay, null, "Click to Annotate");

        default:
          return React__default.createElement(Overlay, null, "Click and Drag to Annotate");
      }
    } else {
      return React__default.createElement(Overlay, null, "Select the annotation for additional options");
    }
  },
  selectors: [RectangleSelector, PointSelector, OvalSelector],
  allowedShapes: [RectangleSelector.TYPE, OvalSelector.TYPE, PointSelector.TYPE],
  toolBarOptions: {
    showDeleteOption: true,
    showToolBar: true,
    renderSelectedAnnotationIcons: function renderSelectedAnnotationIcons() {
      return null;
    },
    renderToolbarIcons: function renderToolbarIcons() {
      return null;
    }
  }
};

var _templateObject$7;
var Img = /*#__PURE__*/styled.img(_templateObject$7 || (_templateObject$7 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  display: block;\n  width: 100%;\n"])));
function Image(props) {
  var imageRef = useRef(null);
  var alt = props.alt,
      draggable = props.draggable,
      src = props.src,
      style = props.style;
  return React__default.createElement(Img, {
    alt: alt,
    draggable: draggable,
    ref: imageRef,
    src: src,
    style: style
  });
}

var BackSvg = "data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%3C!DOCTYPE%20svg%20PUBLIC%20%22-%2F%2FW3C%2F%2FDTD%20SVG%201.1%2F%2FEN%22%20%22http%3A%2F%2Fwww.w3.org%2FGraphics%2FSVG%2F1.1%2FDTD%2Fsvg11.dtd%22%3E%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20version%3D%221.1%22%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20d%3D%22M20%2C11V13H8L13.5%2C18.5L12.08%2C19.92L4.16%2C12L12.08%2C4.08L13.5%2C5.5L8%2C11H20Z%22%20%2F%3E%3C%2Fsvg%3E";

var CircleSvg = "data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%3C!DOCTYPE%20svg%20PUBLIC%20%22-%2F%2FW3C%2F%2FDTD%20SVG%201.1%2F%2FEN%22%20%22http%3A%2F%2Fwww.w3.org%2FGraphics%2FSVG%2F1.1%2FDTD%2Fsvg11.dtd%22%3E%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20version%3D%221.1%22%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20d%3D%22M12%2C20A8%2C8%200%200%2C1%204%2C12A8%2C8%200%200%2C1%2012%2C4A8%2C8%200%200%2C1%2020%2C12A8%2C8%200%200%2C1%2012%2C20M12%2C2A10%2C10%200%200%2C0%202%2C12A10%2C10%200%200%2C0%2012%2C22A10%2C10%200%200%2C0%2022%2C12A10%2C10%200%200%2C0%2012%2C2Z%22%20%2F%3E%3C%2Fsvg%3E";

var PointSvg = "data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%3C!DOCTYPE%20svg%20PUBLIC%20%22-%2F%2FW3C%2F%2FDTD%20SVG%201.1%2F%2FEN%22%20%22http%3A%2F%2Fwww.w3.org%2FGraphics%2FSVG%2F1.1%2FDTD%2Fsvg11.dtd%22%3E%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20version%3D%221.1%22%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20d%3D%22M12%2C8A4%2C4%200%200%2C0%208%2C12A4%2C4%200%200%2C0%2012%2C16A4%2C4%200%200%2C0%2016%2C12A4%2C4%200%200%2C0%2012%2C8Z%22%20%2F%3E%3C%2Fsvg%3E";

var SquareSvg = "data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%3C!DOCTYPE%20svg%20PUBLIC%20%22-%2F%2FW3C%2F%2FDTD%20SVG%201.1%2F%2FEN%22%20%22http%3A%2F%2Fwww.w3.org%2FGraphics%2FSVG%2F1.1%2FDTD%2Fsvg11.dtd%22%3E%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20version%3D%221.1%22%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20d%3D%22M3%2C3H21V21H3V3M5%2C5V19H19V5H5Z%22%20%2F%3E%3C%2Fsvg%3E";

var TrashSvg = "data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%3C!DOCTYPE%20svg%20PUBLIC%20%22-%2F%2FW3C%2F%2FDTD%20SVG%201.1%2F%2FEN%22%20%22http%3A%2F%2Fwww.w3.org%2FGraphics%2FSVG%2F1.1%2FDTD%2Fsvg11.dtd%22%3E%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20version%3D%221.1%22%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20d%3D%22M9%2C3V4H4V6H5V19A2%2C2%200%200%2C0%207%2C21H17A2%2C2%200%200%2C0%2019%2C19V6H20V4H15V3H9M7%2C6H17V19H7V6M9%2C8V17H11V8H9M13%2C8V17H15V8H13Z%22%20%2F%3E%3C%2Fsvg%3E";

var _templateObject$8, _templateObject2$2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;
var ToolbarDiv = /*#__PURE__*/styled.div(_templateObject$8 || (_templateObject$8 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  border: 1px solid #ccc;\n  background-color: #efefef;\n  width: 100%;\n  display: flex;\n"])));
var StyledIcon = /*#__PURE__*/styled.a(_templateObject2$2 || (_templateObject2$2 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  border-right: 1px solid #ccc;\n  width: 40px;\n  height: 40px;\n  background-repeat: no-repeat;\n  background-position: center;\n  cursor: pointer;\n  background-color: ", ";\n"])), function (_ref) {
  var isSelected = _ref.isSelected;
  return isSelected ? '#ccc' : '#efefef';
});
var CircleIcon = /*#__PURE__*/styled(StyledIcon)(_templateObject3 || (_templateObject3 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  background-image: url(", ");\n"])), CircleSvg);
var PointIcon = /*#__PURE__*/styled(StyledIcon)(_templateObject4 || (_templateObject4 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  background-image: url(", ");\n"])), PointSvg);
var SquareIcon = /*#__PURE__*/styled(StyledIcon)(_templateObject5 || (_templateObject5 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  background-image: url(", ");\n"])), SquareSvg);
var BackIcon = /*#__PURE__*/styled(StyledIcon)(_templateObject6 || (_templateObject6 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  background-image: url(", ");\n"])), BackSvg);
var TrashIcon = /*#__PURE__*/styled(StyledIcon)(_templateObject7 || (_templateObject7 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  background-image: url(", ");\n"])), TrashSvg);
function ToolBar(_ref2) {
  var allowedShapes = _ref2.allowedShapes,
      deleteAnnotation = _ref2.deleteAnnotation,
      options = _ref2.options,
      selectedAnnotation = _ref2.selectedAnnotation,
      selectedSelectorType = _ref2.selectedSelectorType,
      setSelectedSelectorType = _ref2.setSelectedSelectorType,
      unSelectSelectedAnnotation = _ref2.unSelectSelectedAnnotation;
  return options.showToolBar ? React__default.createElement(ToolbarDiv, null, selectedAnnotation ? React__default.createElement(React__default.Fragment, null, React__default.createElement(BackIcon, {
    isSelected: false,
    onClick: function onClick() {
      return unSelectSelectedAnnotation(selectedAnnotation);
    }
  }), options.renderSelectedAnnotationIcons == null ? void 0 : options.renderSelectedAnnotationIcons({
    annotation: selectedAnnotation,
    unSelectAnnotation: function unSelectAnnotation() {
      return unSelectSelectedAnnotation(selectedAnnotation);
    }
  }), React__default.createElement(TrashIcon, {
    isSelected: false,
    onClick: function onClick() {
      return deleteAnnotation(selectedAnnotation);
    }
  })) : React__default.createElement(React__default.Fragment, null, allowedShapes.includes(AllowedShape.Rectangle) ? React__default.createElement(SquareIcon, {
    isSelected: selectedSelectorType === AllowedShape.Rectangle,
    onClick: function onClick() {
      return setSelectedSelectorType(AllowedShape.Rectangle);
    }
  }) : null, allowedShapes.includes(AllowedShape.Oval) ? React__default.createElement(CircleIcon, {
    isSelected: selectedSelectorType === AllowedShape.Oval,
    onClick: function onClick() {
      return setSelectedSelectorType(AllowedShape.Oval);
    }
  }) : null, allowedShapes.includes(AllowedShape.Point) ? React__default.createElement(PointIcon, {
    isSelected: selectedSelectorType === AllowedShape.Point,
    onClick: function onClick() {
      return setSelectedSelectorType(AllowedShape.Point);
    }
  }) : null)) : null;
}

var _templateObject$9, _templateObject2$3, _templateObject3$1;
var Container$5 = /*#__PURE__*/styled.div(_templateObject$9 || (_templateObject$9 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  clear: both;\n  position: relative;\n  width: 100%;\n\n  &:hover ", " {\n    opacity: 1;\n  }\n"])), Overlay);
var ItemsDiv = /*#__PURE__*/styled.div(_templateObject2$3 || (_templateObject2$3 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n"])));
var ReadOnlyDiv = /*#__PURE__*/styled.div(_templateObject3$1 || (_templateObject3$1 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n"])));

function Annotation(options) {
  var _tmpAnnotation$select;

  var props = _extends({}, defaultProps, options);
  var allowedShapes = props.allowedShapes,
      alt = props.alt,
      className = props.className,
      editorMode = props.editorMode,
      idFunction = props.idFunction,
      onSelectedAnnotationUpdate = props.onSelectedAnnotationUpdate,
      onAnnotationClickProp = props.onAnnotationClick,
      overlayOptions = props.overlayOptions,
      renderShape = props.renderShape,
      renderEditor = props.renderEditor,
      renderOverlay = props.renderOverlay,
      style = props.style,
      src = props.src,
      toolBarOptions = props.toolBarOptions;

  var _useState = useState(props.allowedShapes[0]),
      selectedSelectorType = _useState[0],
      setSelectedSelectorType = _useState[1]; // This annotation is set when adding a new annotation. The state is cleared after annotation is added


  var _useState2 = useState(),
      selectedAnnotation = _useState2[0],
      setSelectedAnnotation = _useState2[1]; // This annotation is set when adding a new annotation. The state is cleared after annotation is added


  var _useState3 = useState(),
      tmpAnnotation = _useState3[0],
      setTmpAnnotation = _useState3[1];

  var _useState4 = useState(options.annotations),
      annotations = _useState4[0],
      setAnnotations = _useState4[1];

  useEffect(function () {
    setAnnotations(options.annotations);
  }, [options.annotations]);

  var _useState5 = useState(false),
      showEditor = _useState5[0],
      setShowEditor = _useState5[1];

  var targetRef = React__default.createRef();

  var removeTargetTouchEventListeners = function removeTargetTouchEventListeners() {
    targetRef.current.ontouchstart = undefined;
    targetRef.current.ontouchend = undefined;
    targetRef.current.ontouchmove = undefined;
    targetRef.current.ontouchcancel = undefined;
  };

  var isInEditMode = editorMode !== EditorMode.ReadOnly && editorMode !== EditorMode.ReadOnlyWithSelection;
  useEffect(function () {
    if (isInEditMode) {
      {
        removeTargetTouchEventListeners();
      }
    }
  });

  var getSelectorByType = function getSelectorByType(type) {
    return props.selectors.find(function (s) {
      return s.TYPE === type;
    });
  };

  var onTargetMouseMove = function onTargetMouseMove(e) {
    options.relativeMousePos.onMouseMove(e);
    onMouseMove(e);
  };

  var onTargetMouseLeave = function onTargetMouseLeave(e) {
    options.relativeMousePos.onMouseLeave(e);
  };

  var onTargetTouchLeave = function onTargetTouchLeave(e) {
    options.relativeMousePos.onTouchLeave(e);
  };

  var onMouseUp = function onMouseUp(e) {
    return callSelectorMethod('onMouseUp', e);
  };

  var onMouseDown = function onMouseDown(e) {
    return callSelectorMethod('onMouseDown', e);
  };

  var onMouseMove = function onMouseMove(e) {
    return callSelectorMethod('onMouseMove', e);
  };

  var onClick = function onClick(e) {
    unselectSelectedAnnotation();
    callSelectorMethod('onClick', e);
  };

  var onAnnotationFinal = function onAnnotationFinal(annotation) {
    var newAnnotationArray = [].concat(annotations, [annotation]);
    setAnnotations(newAnnotationArray);
    options.onAnnotationsUpdate(newAnnotationArray);
    setTmpAnnotation(undefined);
  };

  var callSelectorMethod = function callSelectorMethod(methodName, e) {
    var _value$selection;

    var editorMode = props.editorMode;

    if (!!options[methodName]) {
      options[methodName](e);
    } else {
      var selector = getSelectorByType(selectedSelectorType);
      var selectorMethod = selector.methods[methodName];

      if (selectorMethod) {
        var value = selectorMethod(tmpAnnotation, e, {
          editorMode: editorMode,
          idFunction: idFunction
        });
        setTmpAnnotation(value);

        switch (value == null ? void 0 : (_value$selection = value.selection) == null ? void 0 : _value$selection.mode) {
          case SelectionMode.Final:
            onAnnotationFinal(value);
            setShowEditor(true);
            break;

          case SelectionMode.Editing:
            setShowEditor(true);
            break;

          default:
            setTmpAnnotation(value);
            setShowEditor(true);
            break;
        }
      }
    }
  };

  var deleteAnnotation = function deleteAnnotation(annotationToDelete) {
    var filtered = annotations.filter(function (annotation) {
      return annotation.data.id !== annotationToDelete.data.id;
    });
    var newAnnotationsValue = [].concat(filtered);
    setAnnotations(newAnnotationsValue);
    setSelectedAnnotation(undefined);
    props.onAnnotationsUpdate(newAnnotationsValue);
  };

  var unselectSelectedAnnotation = function unselectSelectedAnnotation() {
    if (selectedAnnotation) {
      setSelectedAnnotation(undefined);
      onSelectedAnnotationUpdate(selectedAnnotation, false);
    }
  };

  var onAnnotationClick = useCallback(function (annotation) {
    setSelectedAnnotation(annotation);
    onSelectedAnnotationUpdate(annotation, true);
    onAnnotationClickProp(annotation);
  }, [onAnnotationClickProp, onSelectedAnnotationUpdate]);
  useHandleEscapeEvent(unselectSelectedAnnotation, selectedAnnotation);
  return React__default.createElement("div", {
    className: className
  }, isInEditMode && React__default.createElement(ToolBar, {
    allowedShapes: allowedShapes,
    deleteAnnotation: deleteAnnotation,
    options: toolBarOptions,
    selectedAnnotation: selectedAnnotation,
    selectedSelectorType: selectedSelectorType,
    setSelectedSelectorType: setSelectedSelectorType,
    unSelectSelectedAnnotation: unselectSelectedAnnotation
  }), React__default.createElement(Container$5, {
    style: _extends({}, props.style, {
      touchAction:  'auto'
    }),
    onMouseLeave: onTargetMouseLeave,
    onTouchCancel: onTargetTouchLeave
  }, React__default.createElement(Image, {
    style: style,
    alt: alt,
    src: src,
    draggable: false
  }), React__default.createElement(ItemsDiv, null, annotations.map(function (annotation) {
    return renderShape({
      annotation: annotation,
      editorMode: props.editorMode,
      isInSelectionMode: !!tmpAnnotation,
      key: annotation.data.id,
      renderContent: props.renderContent,
      onAnnotationClick: onAnnotationClick,
      selectedAnnotation: selectedAnnotation
    });
  }), (tmpAnnotation == null ? void 0 : tmpAnnotation.geometry) && renderShape({
    annotation: tmpAnnotation,
    editorMode: props.editorMode,
    isInSelectionMode: !!tmpAnnotation,
    key: tmpAnnotation.data.id,
    renderContent: props.renderContent,
    onAnnotationClick: onAnnotationClick
  })), isInEditMode ? React__default.createElement(ItemsDiv, {
    onClick: onClick,
    onMouseUp: onMouseUp,
    onMouseDown: onMouseDown,
    onMouseMove: onTargetMouseMove,
    ref: targetRef
  }) : React__default.createElement(ReadOnlyDiv, {
    onClick: unselectSelectedAnnotation
  }), isInEditMode && (overlayOptions == null ? void 0 : overlayOptions.displayOverlay) && renderOverlay({
    annotations: annotations,
    overlayText: overlayOptions == null ? void 0 : overlayOptions.overlayText,
    selectorType: selectedSelectorType
  }), showEditor && tmpAnnotation && ((_tmpAnnotation$select = tmpAnnotation.selection) == null ? void 0 : _tmpAnnotation$select.mode) === SelectionMode.Editing && renderEditor({
    annotation: tmpAnnotation,
    onSubmit: onAnnotationFinal
  }), React__default.createElement("div", null, props.children)));
}

var WrappedAnnotation = /*#__PURE__*/compose(withRelativeMousePos())(Annotation);

export { AllowedShape, WrappedAnnotation as Annotation, EditorMode, Oval$1 as Oval, OvalSelector, Point$1 as Point, PointSelector, Rectangle$1 as Rectangle, RectangleSelector, SelectionMode };
//# sourceMappingURL=react-mark-image.esm.js.map
